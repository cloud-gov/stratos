#!/usr/bin/env bash
# shellcheck disable=SC2317

set -xeuo pipefail

declare git_url git_tag work_dir
declare -x TAG NODE_VERSION TMP_DIR

git_url="https://github.com/cloudfoundry/stratos.git"
git_tag="${TAG:-develop}"
work_dir="${PWD}"
NODE_VERSION="${NODE_VERISON:-20.13.1}"
NODE_SHA2="${NODE_SHA2:-71ec5c92b35770170dad21ff65130f3e4201e8a0bcd32986e5dcf32b57f379e6}"
TMP_DIR=/tmp

node::install() {
  local download_file
  download_file="${TMP_DIR}/node${NODE_VERSION}.tar.gz"
  
  export node_install_dir="/tmp/node${NODE_VERSION}"
  #export node_dir="${node_install_dir}/node-v${NODE_VERSION}-linux-x64"
  
  mkdir -p "${node_install_dir}"
  
  if [[ ! -f "${node_install_dir}/bin/node" ]]; then
# - name: node
#  version: 20.13.1
#  uri: https://buildpacks.cloudfoundry.org/dependencies/node/node_20.13.1_linux_x64_cflinuxfs4_71ec5c92.tgz
#  sha256: 71ec5c92b35770170dad21ff65130f3e4201e8a0bcd32986e5dcf32b57f379e6
#  cf_stacks:
#  - cflinuxfs4
#  source: https://nodejs.org/dist/v20.13.1/node-v20.13.1.tar.gz
#  source_sha256: a85ee53aa0a5c2f5ca94fa414cdbceb91eb7d18a77fc498358512c14cc6c6991

    URL=https://buildpacks.cloudfoundry.org/dependencies/node/node_${NODE_VERSION}_linux_x64_cflinuxfs4_71ec5c92.tgz
  
    echo "-----> Download Nodejs ${NODE_VERSION}"
    curl -s -L --retry 15 --retry-delay 2 "$URL" -o "${download_file}"
  
    DOWNLOAD_SHA2=$(sha256sum "${download_file}" | cut -d ' ' -f 1)
  
    if [[ ${DOWNLOAD_SHA2} != "${NODE_SHA2}" ]]; then
      echo "       **ERROR** MD5 mismatch: got $DOWNLOAD_SHA2 expected $NODE_SHA2"
      exit 1
    fi
  
    tar xzf "${download_file}" -C "${node_install_dir}"
    rm "${download_file}"
  fi
  
  if [[ ! -f "${node_install_dir}/bin/node" ]]; then
    echo "       **ERROR** Could not download nodejs"
    exit 1
  fi
  
  export NODE_HOME="${node_install_dir}"
}


if [[ -z ${USE_LOCAL:-""} ]] ; then

  git clone "${git_url}" stratos-ui || true

  if [[ -n ${git_tag} ]]; then
    pushd stratos-ui
    git checkout "${git_tag}"
    export stratos_version="${git_tag}"
    popd
  fi
else
  echo "Using local checked out copy on stratos-ui"
fi

if [[ -n ${VERSION:-""} ]] ; then
  export stratos_version="${VERSION}"  # Will be tagged on publish in Concourse
fi

exit_trap() {
  # See: install_nodejs.sh
  [[ -d "${TMP_DIR}/node${NODE_VERSION}" ]] && rm -rf "${TMP_DIR}/node${NODE_VERSION}"
  [[ -f "${TMP_DIR}/node${NODE_VERSION}.tar.gz" ]] && rm -rf "${TMP_DIR}/node${NODE_VERSION}.tar.gz"
  true
}
trap exit_trap EXIT

if ! which npm > /dev/null; then
  node::install
  export PATH="${NODE_HOME}/bin:$PATH"
else
  npm_location="$(which npm)"
  export NODE_HOME="${npm_location%%/bin/npm}"
fi

mkdir -p cache
build_dir="${work_dir}/stratos-ui"

# Fix the "authenticity of host can't be established" error during build
#ssh-keyscan "bitbucket.org" >> ~/.ssh/known_hosts

# prebuild ui
cd stratos-ui
if [[ -n "${stratos_version:-""}" ]]; then
  sed -i package.json -e 's/"version": ".*",$/"version": "'"$stratos_version"'",/'
fi
npm install
npm run prebuild-ui
rm -Rf ./dist

# Actually build Stratos
bash -x deploy/cloud-foundry/build.sh "${build_dir}" "${work_dir}/cache"
cd "${work_dir}"

# Remove build artifacts (node_modules & bower_components)
if [[ -d "${build_dir}/node_modules" ]]; then
  rm -rf "${build_dir}/node_modules"
fi

if [[ -d "${build_dir}/bower_components" ]]; then
  rm -rf "${build_dir}/bower_components"
fi

echo "web: ./deploy/cloud-foundry/start.sh" > "${build_dir}/Procfile"

ls -lah "${build_dir}"
cd "${build_dir}"
package_version="${stratos_version:-"dev-$(date +%Y%m%d%H%M%S)"}"
if [[ -n ${RELEASE_DIR:-""} ]] ; then
  zip -r -x@exclude.lst "${work_dir}/${RELEASE_DIR}/stratos-ui-${package_version}.zip" ./*
else
  zip -r -x@exclude.lst "${work_dir}/stratos-ui-${package_version}.zip" ./*
fi
cd "${work_dir}"

exit 0
